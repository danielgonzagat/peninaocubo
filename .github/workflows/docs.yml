# PENIN-Ω IA³ - Documentation Workflow
# Purpose: Build and deploy documentation to GitHub Pages

name: Documentation

on:
  push:
    branches: [main]
    paths:
      - "docs/**"
      - "penin/**/*.py"
      - "mkdocs.yml"
      - "README.md"
  pull_request:
    paths:
      - "docs/**"
      - "mkdocs.yml"
  workflow_dispatch:

env:
  PYTHON_VERSION: "3.11"

permissions:
  contents: write
  pages: write
  id-token: write

jobs:
  # ============================================================================
  # Job 1: Build Documentation
  # ============================================================================
  build:
    name: Build Documentation
    runs-on: ubuntu-latest
    timeout-minutes: 15

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python ${{ env.PYTHON_VERSION }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: pip

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e ".[docs]"

      - name: Verify MkDocs configuration
        run: mkdocs --version

      - name: Build documentation
        run: |
          mkdocs build --strict --verbose
          
          # Validate built site
          if [ ! -f site/index.html ]; then
            echo "❌ Documentation build failed - no index.html"
            exit 1
          fi
          
          echo "✅ Documentation built successfully"
          ls -lh site/

      - name: Upload documentation artifact
        uses: actions/upload-artifact@v4
        with:
          name: docs-site
          path: site/
          retention-days: 7

  # ============================================================================
  # Job 2: Deploy to GitHub Pages
  # ============================================================================
  deploy:
    name: Deploy to GitHub Pages
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    timeout-minutes: 10

    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download documentation artifact
        uses: actions/download-artifact@v4
        with:
          name: docs-site
          path: site/

      - name: Setup Pages
        uses: actions/configure-pages@v4

      - name: Upload to GitHub Pages
        uses: actions/upload-pages-artifact@v3
        with:
          path: site/

      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4

      - name: Report deployment
        run: |
          echo "✅ Documentation deployed to: ${{ steps.deployment.outputs.page_url }}"

  # ============================================================================
  # Job 3: Validate Links
  # ============================================================================
  link-check:
    name: Check Documentation Links
    runs-on: ubuntu-latest
    needs: build
    timeout-minutes: 10

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download documentation artifact
        uses: actions/download-artifact@v4
        with:
          name: docs-site
          path: site/

      - name: Check links
        uses: lycheeverse/lychee-action@v1
        with:
          args: --verbose --no-progress 'site/**/*.html'
          fail: false

  # ============================================================================
  # Job 4: Generate API Documentation
  # ============================================================================
  api-docs:
    name: Generate API Reference
    runs-on: ubuntu-latest
    timeout-minutes: 10

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python ${{ env.PYTHON_VERSION }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: pip

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e ".[docs]"
          pip install pdoc3

      - name: Generate API docs
        run: |
          pdoc --html --output-dir api_docs penin/
          
          # Create index
          cat > api_docs/index.html <<EOF
          <!DOCTYPE html>
          <html>
          <head>
            <meta charset="utf-8">
            <meta http-equiv="refresh" content="0; url=penin/index.html">
            <title>PENIN-Ω API Reference</title>
          </head>
          <body>
            <p>Redirecting to <a href="penin/index.html">API documentation</a>...</p>
          </body>
          </html>
          EOF

      - name: Upload API docs
        uses: actions/upload-artifact@v4
        with:
          name: api-docs
          path: api_docs/
          retention-days: 7

  # ============================================================================
  # Job 5: Documentation Quality Check
  # ============================================================================
  quality-check:
    name: Documentation Quality
    runs-on: ubuntu-latest
    timeout-minutes: 10

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python ${{ env.PYTHON_VERSION }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install tools
        run: |
          pip install codespell doc8 proselint

      - name: Check spelling in docs
        run: |
          codespell docs/ README.md --skip="docs/archive,*.git" || true

      - name: Check ReStructuredText style
        run: |
          doc8 docs/ || true

      - name: Lint prose
        run: |
          proselint docs/**/*.md README.md || true

  # ============================================================================
  # Final Documentation Status
  # ============================================================================
  docs-success:
    name: Documentation Success
    runs-on: ubuntu-latest
    needs: [build, link-check, api-docs, quality-check]
    if: always()

    steps:
      - name: Check all docs jobs
        run: |
          if [[ "${{ needs.build.result }}" == "success" ]]; then
            echo "✅ Documentation build successful"
            exit 0
          else
            echo "❌ Documentation build failed"
            exit 1
          fi
