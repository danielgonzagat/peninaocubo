name: CI

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]

jobs:
  build-test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Cache pip
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/pyproject.toml') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install dependencies
        run: |
          python -m pip install -U pip
          pip install -e ".[dev,docs,full]"

      - name: Lint (ruff)
        run: ruff check penin scripts

      - name: Format check (black)
        run: black --check penin scripts

      - name: Type check (mypy)
        run: mypy penin

      - name: Run tests
        run: pytest -q

name: CI

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]

jobs:
  test:
    name: Test Python ${{ matrix.python-version }}
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.11', '3.12']
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
          
      - name: Cache pip packages
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-
            
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install -e .
          
      - name: Run tests with pytest
        run: |
          pytest tests/ -v --tb=short --cov=penin --cov-report=xml --cov-report=html
        env:
          PENIN_CACHE_HMAC_KEY: test-key
          PENIN_METRICS_TOKEN: test-token
          
      - name: Upload coverage reports
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage.xml
          flags: unittests
          name: codecov-umbrella
          
      - name: Upload HTML coverage report
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: coverage-report-${{ matrix.python-version }}
          path: htmlcov/
          
  lint:
    name: Lint and Format Check
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          
      - name: Install linting tools
        run: |
          python -m pip install --upgrade pip
          pip install ruff black mypy
          
      - name: Run Ruff
        run: ruff check . --output-format=github
        
      - name: Check formatting with Black
        run: black --check .
        
      - name: Type checking with mypy
        run: mypy penin/ --ignore-missing-imports
        continue-on-error: true
        
  build:
    name: Build Distribution
    runs-on: ubuntu-latest
    needs: [test, lint]
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          
      - name: Install build tools
        run: |
          python -m pip install --upgrade pip
          pip install build wheel
          
      - name: Build distribution
        run: python -m build
        
      - name: Check distribution
        run: |
          pip install twine
          twine check dist/*
          
      - name: Upload artifacts
        uses: actions/upload-artifact@v3
        with:
          name: dist
          path: dist/