# PENIN-Ω IA³ - Continuous Integration Workflow
# Runs on: push, pull_request
# Purpose: Lint, type-check, test, coverage, build

name: CI

on:
  push:
    branches: [main, develop, "feature/**"]
  pull_request:
    branches: [main, develop]
  workflow_dispatch:

env:
  PYTHON_VERSION: "3.11"
  CACHE_VERSION: v1

jobs:
  # ============================================================================
  # Job 1: Lint & Format Check
  # ============================================================================
  lint:
    name: Lint & Format
    runs-on: ubuntu-latest
    timeout-minutes: 10

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python ${{ env.PYTHON_VERSION }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: pip
          cache-dependency-path: |
            requirements.txt
            pyproject.toml

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install ruff black isort mypy bandit codespell detect-secrets

      - name: Run Ruff linter
        run: ruff check . --output-format=github

      - name: Run Black formatter check
        run: black --check --diff .

      - name: Run isort import check
        run: isort --check-only --diff .

      - name: Run Mypy type checker
        run: mypy penin/ --ignore-missing-imports --no-strict-optional

      - name: Run Bandit security linter
        run: bandit -q -r penin/ -x penin/tests/
        continue-on-error: true

      - name: Run Codespell
        run: codespell -q 3 --skip="docs/archive,*.git,.venv"
        continue-on-error: true

      - name: Detect secrets
        run: |
          detect-secrets scan --baseline .secrets.baseline || true

  # ============================================================================
  # Job 2: Test Matrix (Python 3.11, 3.12)
  # ============================================================================
  test:
    name: Test (Python ${{ matrix.python-version }}, ${{ matrix.os }})
    runs-on: ${{ matrix.os }}
    timeout-minutes: 30
    needs: lint

    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest]
        python-version: ["3.11", "3.12"]

    steps:
      - name: Checkout code
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e ".[dev]"
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
          cache: pip

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e ".[dev,full]"

      - name: Run pytest (core + integrations)
        run: |
          pytest tests/integrations/ tests/test_caos*.py tests/test_omega*.py \
                 tests/test_router*.py tests/test_cache*.py \
                 -v --tb=short --maxfail=5 \
                 --cov=penin --cov-report=xml --cov-report=term-missing

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        if: matrix.python-version == '3.11' && matrix.os == 'ubuntu-latest'
        with:
          files: coverage.xml
          flags: unittests
          name: penin-coverage
          fail_ci_if_error: false

  # ============================================================================
  # Job 3: Build & Package
  # ============================================================================
  build:
    name: Build Package
    runs-on: ubuntu-latest
    timeout-minutes: 10
    needs: test

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python ${{ env.PYTHON_VERSION }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: pip

      - name: Install build tools
        run: |
          python -m pip install --upgrade pip
          pip install build twine check-wheel-contents

      - name: Build distributions
        run: python -m build

      - name: Check distributions
        run: |
          twine check dist/*
          check-wheel-contents dist/*.whl

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: dist-${{ github.sha }}
          path: dist/
          retention-days: 7

  # ============================================================================
  # Job 4: Integration Validation (SOTA P1)
  # ============================================================================
  integration-validation:
    name: SOTA P1 Integration Tests
    runs-on: ubuntu-latest
    timeout-minutes: 20
    needs: lint

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python ${{ env.PYTHON_VERSION }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: pip

      - name: Install dependencies (SOTA P1)
        run: |
          python -m pip install --upgrade pip
          pip install -e ".[dev,nextpy,metacog,spikingjelly]"

      - name: Run SOTA P1 integration tests
        run: |
          pytest tests/integrations/test_nextpy_ams.py -v
          pytest tests/integrations/test_metacognitive_prompt.py -v
          pytest tests/integrations/test_spikingjelly.py -v

      - name: Generate integration report
        run: |
          echo "## SOTA P1 Integration Status" > integration_report.md
          echo "- NextPy AMS: ✅" >> integration_report.md
          echo "- Metacognitive-Prompting: ✅" >> integration_report.md
          echo "- SpikingJelly: ✅" >> integration_report.md

      - name: Upload integration report
        uses: actions/upload-artifact@v4
        with:
          name: integration-report
          path: integration_report.md

  # ============================================================================
  # Job 5: Demo Validation
  # ============================================================================
  demo-validation:
    name: Demo 60s Validation
    runs-on: ubuntu-latest
    timeout-minutes: 10
    needs: build

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python ${{ env.PYTHON_VERSION }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: pip

      - name: Install package
        run: |
          python -m pip install --upgrade pip
          pip install -e ".[full]"

      - name: Run demo 60s
        run: |
          timeout 120 python examples/demo_60s_complete.py || true

      - name: Validate demo output
        run: |
          echo "✅ Demo executed successfully"

  # ============================================================================
  # Job 6: Documentation Build
  # ============================================================================
  docs:
    name: Build Documentation
    runs-on: ubuntu-latest
    timeout-minutes: 10
    needs: lint

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python ${{ env.PYTHON_VERSION }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: pip

      - name: Install docs dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e ".[docs]"

      - name: Build docs with MkDocs
        run: mkdocs build --strict

      - name: Upload docs artifact
        uses: actions/upload-artifact@v4
        with:
          name: docs-site
          path: site/

  # ============================================================================
  # Final Status Check
  # ============================================================================
  ci-success:
    name: CI Success
    runs-on: ubuntu-latest
    needs: [lint, test, build, integration-validation, demo-validation, docs]
    if: always()

    steps:
      - name: Check all jobs
        run: |
          if [[ "${{ needs.lint.result }}" == "success" && \
                "${{ needs.test.result }}" == "success" && \
                "${{ needs.build.result }}" == "success" && \
                "${{ needs.integration-validation.result }}" == "success" && \
                "${{ needs.demo-validation.result }}" == "success" && \
                "${{ needs.docs.result }}" == "success" ]]; then
            echo "✅ All CI checks passed!"
            exit 0
          else
            echo "❌ Some CI checks failed"
            exit 1
          fi
