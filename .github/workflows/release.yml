name: Release Pipeline
on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to release (e.g., v0.8.1)'
        required: true
        type: string

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install build dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build twine wheel
    
    - name: Install project dependencies
      run: |
        pip install -r requirements.txt
    
    - name: Run tests
      run: |
        python -m pytest tests/ -v --cov=penin --cov-report=xml
    
    - name: Upload coverage
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
    
    - name: Build package
      run: |
        python -m build
    
    - name: Check package
      run: |
        twine check dist/*
    
    - name: Upload build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: dist-packages
        path: dist/

  security-scan:
    runs-on: ubuntu-latest
    needs: build-and-test
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install safety bandit semgrep
    
    - name: Security scan with safety
      run: |
        pip install -r requirements.txt
        safety check --json --output safety-report.json || true
    
    - name: Security scan with bandit
      run: |
        bandit -r penin/ -f json -o bandit-report.json || true
    
    - name: Security scan with semgrep
      run: |
        semgrep --config=auto --json --output=semgrep-report.json . || true
    
    - name: Upload security reports
      uses: actions/upload-artifact@v3
      with:
        name: security-reports
        path: |
          safety-report.json
          bandit-report.json
          semgrep-report.json

  sbom-generation:
    runs-on: ubuntu-latest
    needs: build-and-test
    steps:
    - uses: actions/checkout@v4
    
    - name: Download build artifacts
      uses: actions/download-artifact@v3
      with:
        name: dist-packages
        path: dist/
    
    - name: Generate SBOM
      run: |
        pip install cyclonedx-bom
        cyclonedx-py -o sbom.json -e .
    
    - name: Upload SBOM
      uses: actions/upload-artifact@v3
      with:
        name: sbom
        path: sbom.json

  sign-and-publish:
    runs-on: ubuntu-latest
    needs: [build-and-test, security-scan, sbom-generation]
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/')
    steps:
    - uses: actions/checkout@v4
    
    - name: Download build artifacts
      uses: actions/download-artifact@v3
      with:
        name: dist-packages
        path: dist/
    
    - name: Download SBOM
      uses: actions/download-artifact@v3
      with:
        name: sbom
        path: .
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install signing tools
      run: |
        pip install twine sigstore
    
    - name: Sign package with Sigstore
      env:
        SIGSTORE_TOKEN: ${{ secrets.SIGSTORE_TOKEN }}
      run: |
        # Sign the wheel
        sigstore sign dist/*.whl
        
        # Sign the source distribution
        sigstore sign dist/*.tar.gz
        
        # Sign the SBOM
        sigstore sign sbom.json
    
    - name: Publish to private registry
      env:
        PYPI_TOKEN: ${{ secrets.PYPI_TOKEN }}
        PYPI_URL: ${{ secrets.PYPI_URL }}
      run: |
        twine upload --repository-url $PYPI_URL \
          --username __token__ \
          --password $PYPI_TOKEN \
          dist/*
    
    - name: Create GitHub Release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref_name }}
        release_name: Release ${{ github.ref_name }}
        body: |
          ## PENIN-Ω ${{ github.ref_name }}
          
          ### Changes
          - See CHANGELOG.md for detailed changes
          
          ### Installation
          ```bash
          pip install peninaocubo==${{ github.ref_name }}
          ```
          
          ### Security
          - Package signed with Sigstore
          - SBOM included
          - Security scans passed
          
          ### Artifacts
          - Source distribution (.tar.gz)
          - Wheel distribution (.whl)
          - SBOM (Software Bill of Materials)
          - Security reports
        draft: false
        prerelease: false
    
    - name: Upload release assets
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: dist/
        asset_name: packages
        asset_content_type: application/zip
    
    - name: Upload SBOM
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: sbom.json
        asset_name: sbom.json
        asset_content_type: application/json

  notify:
    runs-on: ubuntu-latest
    needs: [sign-and-publish]
    if: always()
    steps:
    - name: Notify on success
      if: needs.sign-and-publish.result == 'success'
      run: |
        echo "✅ Release ${{ github.ref_name }} published successfully!"
        # Add notification logic here (Slack, email, etc.)
    
    - name: Notify on failure
      if: needs.sign-and-publish.result == 'failure'
      run: |
        echo "❌ Release ${{ github.ref_name }} failed!"
        # Add notification logic here (Slack, email, etc.)