name: Build Operator Image

on:
  push:
    branches:
      - main
    paths:
      - 'deploy/operator/**'
      - '.github/workflows/operator-build.yml'
  pull_request:
    paths:
      - 'deploy/operator/**'
  release:
    types: [published]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository_owner }}/penin-operator

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=sha
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push operator image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: deploy/operator/Dockerfile
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64,linux/arm64

  test:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'pip'

      - name: Install dependencies
        run: |
          pip install -e ".[dev]"

      - name: Run operator tests
        run: |
          pytest tests/operator/ -v

      - name: Validate Kubernetes manifests
        run: |
          # Install kubeval or similar validation tool
          curl -L https://github.com/instrumenta/kubeval/releases/latest/download/kubeval-linux-amd64.tar.gz | tar xz
          sudo mv kubeval /usr/local/bin/
          
          # Validate CRDs
          kubeval --ignore-missing-schemas deploy/operator/crds/peninaomegacluster-crd.yaml || true
          
          # Validate operator manifests
          kubeval --ignore-missing-schemas deploy/operator/manifests/operator.yaml || true
          
          # Validate examples
          kubeval --ignore-missing-schemas deploy/operator/examples/*.yaml || true
