```
PENIN-Ω Chaos Engineering Test Architecture
============================================

┌─────────────────────────────────────────────────────────────────────┐
│                        Chaos Test Suite                             │
│                    (test_chaos_engineering.py)                      │
│                          11 Tests Total                             │
└─────────────────────────────────────────────────────────────────────┘
                                    │
                ┌───────────────────┼───────────────────┐
                │                   │                   │
        ┌───────▼────────┐  ┌──────▼──────┐   ┌───────▼────────┐
        │ Service Death  │  │   Network   │   │      Data      │
        │   Scenarios    │  │   Latency   │   │  Corruption    │
        │   (2 tests)    │  │  Scenarios  │   │   Scenarios    │
        └────────────────┘  │  (3 tests)  │   │   (4 tests)    │
                            └─────────────┘   └────────────────┘
                                    │
                    ┌───────────────┼───────────────┐
                    │                               │
            ┌───────▼────────┐              ┌──────▼──────────┐
            │   Combined     │              │  Fail-Closed    │
            │   Failures     │              │   Guarantee     │
            │   (1 test)     │              │   Validation    │
            └────────────────┘              │   (1 test)      │
                                           └─────────────────┘

════════════════════════════════════════════════════════════════════════

Test Infrastructure & Tools
───────────────────────────────────────────────────────────────────────

┌─────────────────────────────────────────────────────────────────────┐
│                       Chaos Utilities                                │
│                     (chaos_utils.py)                                 │
│                                                                      │
│  ┌──────────────┐  ┌──────────────┐  ┌──────────────┐             │
│  │ Toxiproxy    │  │  Network     │  │   Service    │             │
│  │   Client     │  │   Chaos      │  │    Chaos     │             │
│  └──────────────┘  └──────────────┘  └──────────────┘             │
│                                                                      │
│  Features:                                                          │
│  • Latency injection         • Service death simulation            │
│  • Bandwidth limitation       • Retry logic testing                │
│  • Connection timeouts        • Packet loss simulation             │
│  • Fail-closed validation     • Intermittent failures              │
└─────────────────────────────────────────────────────────────────────┘

════════════════════════════════════════════════════════════════════════

Execution Environment
───────────────────────────────────────────────────────────────────────

LOCAL MODE:                      DOCKER MODE:
┌──────────────┐                 ┌──────────────────────────┐
│  pytest      │                 │   Docker Compose         │
│  tests/      │                 │  ┌────────────────────┐  │
│  test_chaos* │                 │  │   Toxiproxy        │  │
└──────────────┘                 │  │   (Port 8474)      │  │
                                │  └────────────────────┘  │
                                │  ┌────────────────────┐  │
                                │  │   Σ-Guard Test     │  │
                                │  │   (Port 8011)      │  │
                                │  └────────────────────┘  │
                                │  ┌────────────────────┐  │
                                │  │   SR-Ω∞ Test      │  │
                                │  │   (Port 8012)      │  │
                                │  └────────────────────┘  │
                                │  ┌────────────────────┐  │
                                │  │   Ω-META Test     │  │
                                │  │   (Port 8013)      │  │
                                │  └────────────────────┘  │
                                └──────────────────────────┘

════════════════════════════════════════════════════════════════════════

CI/CD Integration (GitHub Actions)
───────────────────────────────────────────────────────────────────────

┌─────────────────────────────────────────────────────────────────────┐
│                    Chaos Tests Workflow                              │
│                  (.github/workflows/chaos-tests.yml)                 │
│                                                                      │
│  Triggers:                           Jobs:                          │
│  • Push to main/develop              • chaos-tests (matrix)         │
│  • Pull requests                     • chaos-tests-with-toxiproxy   │
│  • Daily schedule (2 AM UTC)         • fail-closed-validation       │
│  • Manual dispatch                   • chaos-test-report            │
│                                                                      │
│  Matrix:                             Artifacts:                     │
│  • Python 3.11, 3.12                 • Coverage reports             │
│  • Quick/Standard/Full modes         • Test results                 │
│                                      • HTML coverage                │
└─────────────────────────────────────────────────────────────────────┘

════════════════════════════════════════════════════════════════════════

Test Execution Flow
───────────────────────────────────────────────────────────────────────

1. SERVICE DEATH TEST
   ┌──────────┐    Kill    ┌──────────┐    Attempt    ┌──────────┐
   │  Start   │  ────────> │  Service │  ──────────>  │  Verify  │
   │ Σ-Guard  │            │   Dead   │               │ Fail-    │
   │ Service  │            │          │               │ Closed   │
   └──────────┘            └──────────┘               └──────────┘
        │                                                    │
        └──────────────> Recovery Test <────────────────────┘

2. NETWORK LATENCY TEST
   ┌──────────┐   Inject   ┌──────────┐   Verify   ┌──────────┐
   │  Normal  │  ────────> │  6s      │  ────────> │  Timeout │
   │  Request │   Delay    │  Delay   │   5s Max   │  Occurs  │
   └──────────┘            └──────────┘            └──────────┘
        │                                                 │
        └──> Retry Logic Test <────> Cascading Test <────┘

3. DATA CORRUPTION TEST
   ┌──────────┐  Send Bad  ┌──────────┐   Verify   ┌──────────┐
   │  Valid   │  ────────> │ Malformed│  ────────> │  System  │
   │  Service │    Data    │   Input  │  Rejection │  Stable  │
   └──────────┘            └──────────┘            └──────────┘
        │                                                 │
        └─> Invalid Types ─> Boundary Values ─> Injection <─┘

════════════════════════════════════════════════════════════════════════

Key Validations
───────────────────────────────────────────────────────────────────────

✅ FAIL-CLOSED GUARANTEE
   ┌─────────────────────────────────────────────────────────────────┐
   │  When ANY component fails:                                      │
   │  1. System defaults to DENY (no promotions)                     │
   │  2. Failure is logged for audit                                 │
   │  3. Operators are alerted                                       │
   │  4. NO silent failures                                          │
   └─────────────────────────────────────────────────────────────────┘

✅ TIMEOUT HANDLING
   • Requests timeout appropriately (don't hang)
   • Timeouts are detected and handled
   • Retry logic works correctly

✅ INPUT VALIDATION
   • Malformed JSON rejected
   • Invalid types caught
   • Boundary values handled
   • Injection attempts blocked

✅ SERVICE RECOVERY
   • Services can restart
   • System resumes normal operation
   • No data loss or corruption

════════════════════════════════════════════════════════════════════════

Test Results Summary
───────────────────────────────────────────────────────────────────────

Total Tests:              11
Passed:                   11 ✅
Failed:                    0 ❌
Skipped:                   0 ⏭️
Success Rate:           100% 📊
Execution Time:        ~24s ⏱️

Coverage by Scenario:
• Service Death:         2/2 tests ✅
• Network Latency:       3/3 tests ✅
• Data Corruption:       4/4 tests ✅
• Combined Failures:     1/1 test  ✅
• Fail-Closed Guarantee: 1/1 test  ✅

════════════════════════════════════════════════════════════════════════

Documentation & Resources
───────────────────────────────────────────────────────────────────────

📖 Main Documentation:
   • tests/CHAOS_TESTING.md              (300+ lines)
   • docs/CHAOS_ENGINEERING_SUMMARY.md   (400+ lines)
   • README.md (Chaos section)           (50+ lines)

🛠️ Scripts & Tools:
   • scripts/run_chaos_tests.sh          (Helper script)
   • deploy/docker-compose.chaos.yml     (Docker setup)
   • .github/workflows/chaos-tests.yml   (CI/CD)

📝 Code:
   • tests/test_chaos_engineering.py     (700 lines, 11 tests)
   • tests/chaos_utils.py                (400 lines, utilities)
   • tests/test_chaos_examples.py        (250 lines, examples)

════════════════════════════════════════════════════════════════════════

Usage Commands
───────────────────────────────────────────────────────────────────────

# Run all chaos tests
pytest tests/test_chaos_engineering.py -v

# Run quick tests only
pytest tests/test_chaos_engineering.py -m "chaos and not slow" -v

# Run with coverage
pytest tests/test_chaos_engineering.py --cov=penin --cov-report=html

# Run with helper script
./scripts/run_chaos_tests.sh --full --verbose --coverage

# Run with Docker + Toxiproxy
docker-compose -f deploy/docker-compose.chaos.yml up

# Run in CI/CD
# (Automatically triggered on push/PR/schedule)

════════════════════════════════════════════════════════════════════════
```
